import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import Imputer
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor

class DataProcessor:
    def __init__(self, file_path):
        self.file_path = file_path

    def load_data(self):
        data = pd.read_csv(self.file_path)
        data.dropna(axis=0, subset=['SalePrice'], inplace=True)
        return data

class ModelTrainer:
    def train_model(self, model, train_X, train_y):
        model.fit(train_X, train_y)
        return model

class Evaluator:
    @staticmethod
    def evaluate_model(model, test_X, test_y):
        predictions = model.predict(test_X)
        return mean_absolute_error(test_y, predictions)

def main():
    data_processor = DataProcessor('../input/train.csv')
    data = data_processor.load_data()

    y = data.SalePrice
    X = data.drop(['SalePrice'], axis=1).select_dtypes(exclude=['object'])

    train_X, test_X, train_y, test_y = train_test_split(X.as_matrix(), y.as_matrix(), test_size=0.25)

    imputer = Imputer()
    train_X = imputer.fit_transform(train_X)
    test_X = imputer.fit_transform(test_X)

    model_trainer = ModelTrainer()

    decision_model = model_trainer.train_model(DecisionTreeRegressor(), train_X, train_y)
    mae_decision_trees = Evaluator.evaluate_model(decision_model, test_X, test_y)
    print("Mean Absolute Error using Decision Trees:", mae_decision_trees)

    forest_model = model_trainer.train_model(RandomForestRegressor(n_estimators=100, max_depth=10), train_X, train_y)
    mae_random_forest = Evaluator.evaluate_model(forest_model, test_X, test_y)
    print("Mean Absolute Error using Random Forest:", mae_random_forest)

    xg_model = model_trainer.train_model(XGBRegressor(n_estimators=100), train_X, train_y)
    mae_xgboost = Evaluator.evaluate_model(xg_model, test_X, test_y)
    print("Mean Absolute Error using XGBoost:", mae_xgboost)

if __name__ == "__main__":
    main()
